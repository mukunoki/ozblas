OzBLAS 1.4 alpha 
May 12, 2021
Daichi Mukunoki, Takeshi Ogita, Katsuhisa Ozaki, Toshiyuki Imamura
Contact: Daichi Mukunoki (daichi.mukunoki@riken.jp)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ATTENTION:
Basically, this code is just intended to demonstrate our
proposed methods presented in our papers. It is not
recommended to use it in real applications. The behavior
of our implementation may depend on the compiler
(options) and the version of the libraries used
internally. If you want to use it in real applications,
please contact us.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ATTENTION:
Currently, binary128 routines do not work correctly on
ARM processors. 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Note:
GPU version is temporarily excluded.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

(1) Overview
Accurate and reproducible BLAS routines "OzBLAS" [3] based on Ozaki scheme [1]
This version contains following routines:
DOT, NRM2, GEMV, GEMM, AXPY, CSRMV, and CG solver (unpreconditioned) on single and double-precision for NVIDIA GPUs and CPUs.
The Ozaki scheme is applied only to the inner product operations in the BLAS operation.
The computation associated with scalar parameters (alpha and beta) are performed on the standard double-precision operation.
The computation associated with scalar parameters and DAXPY are performed with fused-multiply-add (FMA).
The CPU version uses CBLAS (MKL, OpenBLAS, etc.) for the internal computation.
The GPU version uses NVIDIA cuBLAS for the internal computation.
This code is an experimental alpha version. We do not guarantee the computation result. However, we welcome your feedback.

(2) Requirements:
libozblas.a:
- GNU or Intel compiler
- MKL or OpenBLAS
libcuozblas.a:
- CUDA and cuBLAS
testing:
- MPLAPACK (http://mplapack.sourceforge.net)
-> With MPFR and binary128
-> v0.9.3 or later is needed
- The GNU MPFR Library (https://www.mpfr.org)
-> MPFR is included in MPLAPACK
-> MPFR must be built with "--enable-float128" option for binary128
-> MPLAPACK should be built with MPFR with binary128 support
- BeBOP Sparse Matrix Converter (http://bebop.cs.berkeley.edu/smc/)
-> For sparse matrix handling

(3) Build:
After modifying Makefiles in src and testing directories, execute make in the current directory.

(4) Usage:
See examples in 'testing' directory.

(5) Limitations:
- CSRMV supports 32-bit indexing only.
- incx and incy are not supported.

(6) References:
[1] K. Ozaki, T. Ogita, S. Oishi, S. M. Rump: Error-free transformations of matrix multiplication by using fast routines of matrix multiplication and its applications, Numer. Algorithms, vol. 59, no. 1, pp. 95-118, 2012.
[2] D. Mukunoki, T. Ogita, K. Ozaki: Accurate and Reproducible BLAS Routines with Ozaki Scheme for Many-core Architectures, Proc. 13th International Conference on Parallel Processing and Applied Mathematics (PPAM2019), LNCS, Vol. 12043, pp. 516-527, 2019.
[3] D. Mukunoki, K. Ozaki, T. Ogita, T. Imamura: DGEMM using Tensor Cores, and Its Accurate and Reproducible Versions, ISC High Performance 2020, Lecture Notes in Computer Science, Vol. 12151, pp. 230-248, 2020.
[4] D. Mukunoki, K. Ozaki, T. Ogita, R. Iakymchuk: Conjugate Gradient Solvers with High Accuracy and Bit-wise Reproducibility between CPU and GPU using Ozaki scheme, Proc. The International Conference on High Performance Computing in Asia-Pacific Region (HPCAsia 2021), pp. 100-109, 2021.

(7) History:
v1.4a
Binary128 support.
Mixed-precision support.
CPU version has been updated with C++ template.
Performance improvement of CPU version.
GPU version is temporarily excluded.
Bug fix.
Some minor updates.

v1.2a17
Performance improvement of CPU implementation.
Bug fix (previously, reproducibility was not ensured in some cases between CPU and GPU).
Some minor updates.

v1.2a
Unpreconditioned CG solver is added.
CSRMV for CPUs is added.
Single-precision routines are added.
Single-precision routines performed with double are added (partially).
A critical bug in the vector splitting on the CPU implementation is fixed.
Some minor updates.

v1.1a04
Scalar arguments (alpha and beta) are supported.
CUBLAS_POINTER_MODE_DEVICE is supported.
DNRM2 and DCSRMV for GPUs are added.
OpenBLAS and NVBLAS are supported.
Some bugs are fixed.

v1.0a03
First release.
